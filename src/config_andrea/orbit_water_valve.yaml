# Forked from: https://github.com/bruxy70/Irrigation-with-display
# MIT License: https://github.com/brianhanifin/Irrigation-with-display/blob/master/LICENSE
#
# Credit: @bruxy70 thank you for the significant head start!
# Personal project goals: https://github.com/brianhanifin/Home-Assistant-Config/issues/37
#

substitutions:
  project: Irrigation Controller
  id: orbit_water_valve


# binary_sensor:
#   - platform: status
#     name: "SW dual 01 Status"

# switch:
#   - platform: orbit_water_valve
#     name: "Test dual"
#     pin_a: GPIO2
#     pin_b: GPIO0


esphome:
  name: $id
  platform: ESP8266
  board: esp01_1m
  includes:
    - irrigation.h

  # <<: !include common/esphome/leds/status_with_api.yaml

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass
  power_save_mode: HIGH

  # Disable rebooting due to losing connection with Home Assistant. This will allow
  # the watering schedule to continue if Home Assistant goes down. Should it become
  # unresponsive, we can have Home Assistant power cycle a smart plug to reboot it.
  reboot_timeout: 0s

  # Using these as a precaution to ensure solid WiFi connectivity.
  # power_save_mode: none
  # manual_ip:
  #   static_ip: 10.0.20.18
  #   gateway: 10.0.20.1
  #   subnet: 255.255.255.0

# <<: !include common/ota.yaml
# <<: !include common/logger.yaml

# Enable Home Assistant API
api:
  password: !secret api_passwd
  
ota:
  password: !secret ota_passwd

  
logger:

globals:
  # ============================================================================= #
  # Irrigation time remaining
  - id: remaining_time5
    type: int
    restore_value: no
    initial_value: "60"

  # ============================================================================= #
  # Store previous values to verify change.
  - id: remaining_time5_previous
    type: int
    restore_value: no
    initial_value: "0"

# Common housekeeping components.
# output:
#   <<: !include common/outputs/status_led.yaml

# light:
#   <<: !include common/lights/status_led.yaml


binary_sensor:
  - !include common/binary_sensors/status.yaml

  # # ============================================================================= #
  # # Buttons along the left side of the unit (R1, R2, R3, R4).
  # - platform: gpio
  #   id: key1
  #   pin:
  #     number: $button1_gpio
  #     mode: INPUT_PULLUP
  #     inverted: True
  #   filters:
  #     - delayed_on: 100ms
  #     - delayed_off: 100ms
  #   on_click:
  #     min_length: 50ms
  #     max_length: 350ms
  #     then:
  #       - switch.toggle: irrigation_zone1




switch:
  #- !include common/switches/restart.yaml

  # ============================================================================= #
  # Virtual Zone Switches which toggle the relay, and store the current state.
  - platform: template
    name: Irrigation Zone5
    id: irrigation_zone5
    lambda: return id(relay5).state;
    optimistic: true
    turn_on_action:
      # Turn on if not disabled.
      if:
        condition:
          lambda: return id(irrigation_zone5_duration) > 0;
        then:
          - switch.turn_on: relay5
    turn_off_action:
      - switch.turn_off: relay5

  # ============================================================================= #
  # Relays which trigger solenoids
  # switch:
  #   - platform: orbit_water_valve
  #     name: "Test dual"
  #     pin_a: GPIO2
  #     pin_b: GPIO0

  - platform: orbit_water_valve
    id: relay5
    # pin: $relay1_gpio
    pin_a: GPIO2
    pin_b: GPIO0
    on_turn_on:
      then:
        # Start the countdown timer.
        - globals.set:
            id: remaining_time5
            value: !lambda return id(irrigation_zone5_duration).state * 60;
        # Show the remaining time.
        - sensor.template.publish:
            id: irrigation_zone5_remaining
            state: !lambda return id(irrigation_zone5_duration).state;
        # Show the "Next Time" as "now".
        - text_sensor.template.publish:
            id: irrigation_zone5_next
            state: "now"
    on_turn_off:
      then:
        - sensor.template.publish:
            id: irrigation_zone5_remaining
            state: "0"
        # Update the next scheduled run time.
        - text_sensor.template.publish:
            id: irrigation_zone5_next
            state: !lambda |-
              return update_next_runtime(id(irrigation_zone5_times).state);



sensor:
  - !include common/sensors/uptime.yaml
  - !include common/sensors/wifi_signal.yaml

  # ============================================================================= #
  # Retrieve durations settings from the Home Assistant UI.
  - platform: homeassistant
    id: ui_zone5_duration
    entity_id: input_number.irrigation_zone5_duration
    on_value:
      then:
      - sensor.template.publish:
          id: irrigation_zone5_duration
          state: !lambda return id(ui_zone5_duration).state;


  # ============================================================================= #
  # Store durations.
  - platform: template
    name: Irrigation Zone5 Duration
    id: irrigation_zone5_duration

  # ============================================================================= #
  # Countdown sensors.
  - platform: template
    name: Irrigation Zone5 Remaining
    id: irrigation_zone5_remaining
    lambda: "return 0;"
    accuracy_decimals: 0
    unit_of_measurement: minutes
    icon: mdi:timer
    on_value:
      then:
        - if:
            condition:
              lambda: return id(remaining_time5) == 0;
            then:
              - switch.turn_off: relay5



text_sensor:
  # ============================================================================= #
  # Retrieve list of times from the Home Assistant UI.
  - platform: homeassistant
    id: ui_zone5_times
    entity_id: input_text.irrigation_zone5_times
    on_value:
      then:
        #- delay: 10sec
        - text_sensor.template.publish:
            id: irrigation_zone5_times
            state: !lambda return id(ui_zone5_times).state;


  # ============================================================================= #
  # Store time lists.
  - platform: template
    name: Irrigation Zone5 Times
    id: irrigation_zone5_times
    on_value:
      then:
        # Update the next scheduled run time.
        - text_sensor.template.publish:
            id: irrigation_zone5_next
            state: !lambda |-
              return update_next_runtime(id(irrigation_zone5_times).state);


  # ============================================================================= #
  # Set the next scheduled time.
  - platform: template
    name: Irrigation Zone5 Next
    id: irrigation_zone5_next

  - platform: template
    name: Irrigation Orbit Valve Time
    id: irrigation_zone5_current_time
    lambda: |-
      return id(homeassistant_time).now().strftime("%Y-%m-%d %H:%M");




# Update the countdown timers every 1 seconds.
interval:
  - interval: 1s
    then:
      - lambda: |-
          if (id(remaining_time5) > 0) {
            // Store the previous time.
            id(remaining_time5_previous) = id(remaining_time5);

            // When the relay is on.
            if (id(relay5).state) {
              // Decrement the timer.
              id(remaining_time5) -= 1;

              // Turn off the relay when the time reaches zero... or the remaining time fails a sanity check!
              //if (id(remaining_time5) <= 0 || id(irrigation_zone5_remaining).state > id(irrigation_zone5_duration).state){
              if (id(remaining_time5) <= 0) {
                id(relay5).turn_off();
                id(remaining_time5) = 0;
              }
            }

            // Update the remaining time display.
            if (id(remaining_time5_previous) != id(remaining_time5)) {
              id(irrigation_zone5_remaining).publish_state( (id(remaining_time5)/60) + 1 );
            }
          }



# Time based automations.
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - lambda: |-
              if (scheduled_runtime(id(irrigation_zone5_next).state.c_str())) {
                id(irrigation_zone5).turn_on();
              }
